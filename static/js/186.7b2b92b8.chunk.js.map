{"version":3,"file":"static/js/186.7b2b92b8.chunk.js","mappings":"yNA6CA,UAzCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAASC,EAAAA,EAAAA,OAEfC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,gHAEMC,EAAAA,EAAAA,IAAgBJ,EAAOK,SAF7B,gBAETC,EAFS,EAETA,KACRT,EAAWS,EAAKC,SAHC,gDAKjBR,EAAS,KAAMS,SAAW,+BALT,yDAAH,qDAQlBL,GACD,GAAE,CAACH,EAAOK,UAEX,IAAII,EAAe,GAUnB,OATuB,IAAnBb,EAAQc,SACVD,EAAeb,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACzB,2BACE,wBAAKF,KACL,uBAAIC,MAFGC,EADgB,MAS3B,8BACGhB,GACC,yBAAIA,EAAJ,QAEA,wBACGF,EAAQc,OACLD,EACA,6CAKb,C,2JC1CKM,E,OAAiBC,EAAAA,OAAa,CAClCC,QAAS,gCACTjB,OAAQ,CACNkB,QAAS,sCAGAC,EAAoB,WAC/B,OAAOJ,EAAeK,IAAI,sBAC3B,EAEYC,EAAiB,SAAAP,GAC5B,OAAOC,EAAeK,IAAf,iBAA6BN,GACrC,EAEYQ,EAAe,SAAAR,GAC1B,OAAOC,EAAeK,IAAf,iBAA6BN,EAA7B,YACR,EAEYV,EAAkB,SAAAU,GAC7B,OAAOC,EAAeK,IAAf,iBAA6BN,EAA7B,YACR,EAEYS,EAAmB,SAAAC,GAC9B,OAAOT,EAAeK,IAAI,gBAAiB,CACzCpB,OAAQ,CACNyB,MAAOD,IAGZ,C","sources":["components/Reviews/Reviews.jsx","shared/api/moviesApi.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'shared/api/moviesApi';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState('');\n  const params = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const { data } = await getMovieReviews(params.movieId);\n        setReviews(data.results);\n      } catch (error) {\n        setError(error.message || 'Something wrong! Try later!');\n      }\n    };\n    fetchReviews();\n  }, [params.movieId]);\n\n  let reviewMarkup = [];\n  if (reviews.length !== 0) {\n    reviewMarkup = reviews.map(({ author, content, id }) => (\n      <li key={id}>\n        <h4>{author}</h4>\n        <p>{content}</p>\n      </li>\n    ));\n  }\n\n  return (\n    <>\n      {error ? (\n        <p>{error} </p>\n      ) : (\n        <ul>\n          {reviews.length\n            ? reviewMarkup\n            : 'We dont have any reviews for this movie'}\n        </ul>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst moviesInstanse = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '85b4dc1af4e574bfc90c25d3ef4bf4bc',\n  },\n});\nexport const getTrendingMovies = () => {\n  return moviesInstanse.get('/trending/movie/day');\n};\n\nexport const getMovieParams = id => {\n  return moviesInstanse.get(`/movie/${id}`);\n};\n\nexport const getMovieCast = id => {\n  return moviesInstanse.get(`/movie/${id}/credits`);\n};\n\nexport const getMovieReviews = id => {\n  return moviesInstanse.get(`/movie/${id}/reviews`);\n};\n\nexport const getMovieBySearch = value => {\n  return moviesInstanse.get('/search/movie', {\n    params: {\n      query: value,\n    },\n  });\n};\n"],"names":["useState","reviews","setReviews","error","setError","params","useParams","useEffect","fetchReviews","getMovieReviews","movieId","data","results","message","reviewMarkup","length","map","author","content","id","moviesInstanse","axios","baseURL","api_key","getTrendingMovies","get","getMovieParams","getMovieCast","getMovieBySearch","value","query"],"sourceRoot":""}