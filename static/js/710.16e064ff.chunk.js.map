{"version":3,"file":"static/js/710.16e064ff.chunk.js","mappings":"6OAmCA,EAjCmB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACpB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,WAEjBC,EAAAA,EAAAA,YAAU,WACRF,EAASG,QAAQC,OAClB,GAAE,IAaH,OACE,kBAAMC,SAPa,SAAAC,GACnBA,EAAEC,iBACFX,EAASE,GACTC,EAAU,GACX,EAGC,WACE,kBACES,KAAK,OACLC,SAfe,SAAAH,GACnB,IAAQI,EAAUJ,EAAEK,OAAZD,MACRX,EAAUW,EACX,EAaKA,MAAOZ,EACPc,IAAKZ,KAEP,uCAGL,E,0BCkBD,EA7Ce,WACb,OAA4BH,EAAAA,EAAAA,UAAS,IAArC,eAAOgB,EAAP,KAAeC,EAAf,KACA,GAA0BjB,EAAAA,EAAAA,UAAS,IAAnC,eAAOkB,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMrB,EAASoB,EAAaE,IAAI,WAEhClB,EAAAA,EAAAA,YAAU,WACR,IAAMmB,EAAgB,mCAAG,gHAEEC,EAAAA,EAAAA,IAAiBxB,GAFnB,gBAEbyB,EAFa,EAEbA,KACRT,EAAUS,EAAKC,SAHM,gDAKrBR,EAAS,KAAMS,SAAW,+BALL,yDAAH,qDAQlB3B,GACFuB,GAEH,GAAE,CAACvB,IASJ,OACE,iCACE,SAAC,EAAD,CAAYF,SATK,SAAAc,GACdA,EAAMgB,QAGXP,EAAgB,CAAErB,OAAQY,GAC3B,IAMIK,IAAS,uBAAIA,IACbF,EAAOc,OAAS,IACf,yBACE,SAACC,EAAA,EAAD,CAAWf,OAAQA,MAGtBf,GAA4B,IAAlBe,EAAOc,SAAiBZ,IACjC,6CAAqBjB,OAI5B,C,2EChDD,EAAuB,yBAAvB,EAAwD,0B,SCoBxD,EAlBkB,SAAC,GAAgB,IAAde,EAAa,EAAbA,OACbgB,GAAWC,EAAAA,EAAAA,MAcjB,OAZmBjB,EAAOkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OAC5B,eAAIC,UAAWC,EAAf,UACE,UAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMT,GAAYU,GAAE,kBAAaP,GAAhD,WACE,gBACEQ,IAAG,6CAAwCN,GAC3CO,IAAI,GACJC,MAAM,SAER,cAAGP,UAAWC,EAAd,SAA2BH,QAPAD,EADH,GAa/B,C,2JCjBKW,E,OAAiBC,EAAAA,OAAa,CAClCC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAGAC,EAAoB,WAC/B,OAAOL,EAAevB,IAAI,sBAC3B,EAEY6B,EAAiB,SAAAjB,GAC5B,OAAOW,EAAevB,IAAf,iBAA6BY,GACrC,EAEYkB,EAAe,SAAAlB,GAC1B,OAAOW,EAAevB,IAAf,iBAA6BY,EAA7B,YACR,EAEYmB,EAAkB,SAAAnB,GAC7B,OAAOW,EAAevB,IAAf,iBAA6BY,EAA7B,YACR,EAEYV,EAAmB,SAAAZ,GAC9B,OAAOiC,EAAevB,IAAI,gBAAiB,CACzC0B,OAAQ,CACNM,MAAO1C,IAGZ,C","sources":["components/SearchFrom/SearchForm.jsx","pages/Movies/Movies.jsx","webpack://goit-react-hw-05-movies/./src/shared/MovieList/movie-list.module.scss?c126","shared/MovieList/MovieList.jsx","shared/api/moviesApi.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\n\nconst SearchForm = ({ onSearch }) => {\n  const [search, setSearch] = useState('');\n\n  const inputRef = useRef();\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  const handleChange = e => {\n    const { value } = e.target;\n    setSearch(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSearch(search);\n    setSearch('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        value={search}\n        ref={inputRef}\n      />\n      <button>Find</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import SearchForm from 'components/SearchFrom/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieBySearch } from 'shared/api/moviesApi';\nimport MovieList from 'shared/MovieList/MovieList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState('');\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('search');\n\n  useEffect(() => {\n    const fetchSearchMovie = async () => {\n      try {\n        const { data } = await getMovieBySearch(search);\n        setMovies(data.results);\n      } catch (error) {\n        setError(error.message || 'Something wrong! Try later!');\n      }\n    };\n    if (search) {\n      fetchSearchMovie();\n    }\n  }, [search]);\n\n  const handleSearch = value => {\n    if (!value.trim()) {\n      return;\n    }\n    setSearchParams({ search: value });\n  };\n\n  return (\n    <>\n      <SearchForm onSearch={handleSearch} />\n\n      {error && <p>{error}</p>}\n      {movies.length > 0 && (\n        <ul>\n          <MovieList movies={movies} />\n        </ul>\n      )}\n      {search && movies.length === 0 && !error && (\n        <p>Cant find movie: {search}</p>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"movie-list_item__zVeEK\",\"title\":\"movie-list_title__TqaCp\"};","import { Link, useLocation } from 'react-router-dom';\nimport scss from './movie-list.module.scss';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  const moviesList = movies.map(({ id, title, poster_path }) => (\n    <li className={scss.item} key={id}>\n      <Link state={{ from: location }} to={`/movies/${id}`}>\n        <img\n          src={`https://image.tmdb.org/t/p/original${poster_path}`}\n          alt=\"\"\n          width=\"300\"\n        />\n        <p className={scss.title}>{title}</p>\n      </Link>\n    </li>\n  ));\n  return moviesList;\n};\n\nexport default MovieList;\n","import axios from 'axios';\n\nconst moviesInstanse = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '85b4dc1af4e574bfc90c25d3ef4bf4bc',\n  },\n});\nexport const getTrendingMovies = () => {\n  return moviesInstanse.get('/trending/movie/day');\n};\n\nexport const getMovieParams = id => {\n  return moviesInstanse.get(`/movie/${id}`);\n};\n\nexport const getMovieCast = id => {\n  return moviesInstanse.get(`/movie/${id}/credits`);\n};\n\nexport const getMovieReviews = id => {\n  return moviesInstanse.get(`/movie/${id}/reviews`);\n};\n\nexport const getMovieBySearch = value => {\n  return moviesInstanse.get('/search/movie', {\n    params: {\n      query: value,\n    },\n  });\n};\n"],"names":["onSearch","useState","search","setSearch","inputRef","useRef","useEffect","current","focus","onSubmit","e","preventDefault","type","onChange","value","target","ref","movies","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","get","fetchSearchMovie","getMovieBySearch","data","results","message","trim","length","MovieList","location","useLocation","map","id","title","poster_path","className","scss","state","from","to","src","alt","width","moviesInstanse","axios","baseURL","params","api_key","getTrendingMovies","getMovieParams","getMovieCast","getMovieReviews","query"],"sourceRoot":""}